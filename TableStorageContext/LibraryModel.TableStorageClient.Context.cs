

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Diagnostics;
using System.Data.Objects;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;

using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.StorageClient;

using Blackriverinc.Framework.DataStore;

using TableStorageSet;

namespace LibraryModel
{
    public partial class LibraryEntities<TConfigProvider> 
    	where TConfigProvider : DataStoreProvider, new()
    	{
    	CloudTableClient	client;
    
    	public const string ContainerName = "LibraryEntities";
    	
    	string _connectionString = null;
    	public string ConnectionString
    		{
    		get
    			{
    			if (_connectionString == null)
    				{
    				KeyedDataStore iconfig = new KeyedDataStore(new TConfigProvider());
    				_connectionString = iconfig[string.Format("{0}.ConnectionString", ContainerName)];
    				}
    			Trace.WriteLine(string.Format("[{0}] Connection='{1}'", ContainerName, _connectionString));
    			return _connectionString;
    			}
    		private set
    			{
    			_connectionString = value;
    			}
    		}
    
    	#region Constructors
    	private void createClient()
    		{
    		CloudStorageAccount account = CloudStorageAccount.Parse(ConnectionString);
    		client = account.CreateCloudTableClient();
    		}
    		
    	public LibraryEntities()
    		{
    		createClient();
    		}
    		
    	public LibraryEntities(string connectionString)
    		{
    		ConnectionString = connectionString;
    		createClient();
    		}
    		
        #endregion
    
    	public bool DoesTableExist(string tableName)
    		{
    		return client.DoesTableExist(tableName);
    		}
    
    	public void SaveChanges()
    		{
    		_books.SaveChanges();
    		}
    		
    #region Entities
    	public bool BooksTableExists
    		{
    			get
    			{
    			return client.DoesTableExist(Book.TableName);
    			}
    		}
    
    	public bool CreateBooks(bool testForExistence = false)
    		{
    		bool created = true;
    		if (testForExistence)
    			created = client.CreateTableIfNotExist(Book.TableName);
    		else
    			client.CreateTable(Book.TableName);
    		return created;
    		}
    		
    	public bool DropBooks(bool testForExistence = false)
    		{
    		bool existed = true;
    		if (testForExistence)
    			existed = client.DeleteTableIfExist(Book.TableName);
    		else
    			client.DeleteTable(Book.TableName);
    		return existed;
    		}
    		
    	public void DeserializeBooks(Stream xstream)
    		{
    		XDocument xdoc = XDocument.Load(xstream);
    		// Just write a custom deserializer for now...
    		foreach (XElement xelem in xdoc.Descendants("Book"))
    			{
    			Book entity = new Book()
    				{
    				ISBN = xelem.Element("ISBN").Value,
    				Title = xelem.Element("Title").Value,
    				Publisher = xelem.Element("Publisher").Value,
    				Author = xelem.Element("Author").Value,
    				Synopsis = xelem.Element("Synopsis").Value
    				};
    			Books.AddObject(entity);
    			}
    		}
    		
    	public void SerializeBooks(Stream xstream)
    		{
    		XDocument xdoc = new XDocument();
    		XElement root = new XElement("Books");
    		xdoc.Add(root);
    			{
    			root.Add(new XElement("ISBN"));
    			root.Add(new XElement("Title"));
    			root.Add(new XElement("Publisher"));
    			root.Add(new XElement("Author"));
    			root.Add(new XElement("Synopsis"));			
    			}
    		xdoc.Save(xstream);
    		}
    
    	public IObjectSet<Book> Books
    		{
    		get 
    			{
    			return _books??(_books  = new TableObjectSet<Book>(client.BaseUri.ToString(), client.Credentials));		
    			}
    		}
    	private TableObjectSet<Book> _books;
    	public bool BookCheckoutsTableExists
    		{
    			get
    			{
    			return client.DoesTableExist(BookCheckout.TableName);
    			}
    		}
    
    	public bool CreateBookCheckouts(bool testForExistence = false)
    		{
    		bool created = true;
    		if (testForExistence)
    			created = client.CreateTableIfNotExist(BookCheckout.TableName);
    		else
    			client.CreateTable(BookCheckout.TableName);
    		return created;
    		}
    		
    	public bool DropBookCheckouts(bool testForExistence = false)
    		{
    		bool existed = true;
    		if (testForExistence)
    			existed = client.DeleteTableIfExist(BookCheckout.TableName);
    		else
    			client.DeleteTable(BookCheckout.TableName);
    		return existed;
    		}
    		
    	public void DeserializeBookCheckouts(Stream xstream)
    		{
    		XDocument xdoc = XDocument.Load(xstream);
    		// Just write a custom deserializer for now...
    		foreach (XElement xelem in xdoc.Descendants("BookCheckout"))
    			{
    			BookCheckout entity = new BookCheckout()
    				{
    				ISBN = xelem.Element("ISBN").Value,
    				Name = xelem.Element("Name").Value,
    				Address = xelem.Element("Address").Value,
    				City = xelem.Element("City").Value,
    				State = xelem.Element("State").Value,
    				ZIP = xelem.Element("ZIP").Value,
    				Email = xelem.Element("Email").Value
    				};
    			BookCheckouts.AddObject(entity);
    			}
    		}
    		
    	public void SerializeBookCheckouts(Stream xstream)
    		{
    		XDocument xdoc = new XDocument();
    		XElement root = new XElement("BookCheckouts");
    		xdoc.Add(root);
    			{
    			root.Add(new XElement("ISBN"));
    			root.Add(new XElement("Name"));
    			root.Add(new XElement("Address"));
    			root.Add(new XElement("City"));
    			root.Add(new XElement("State"));
    			root.Add(new XElement("ZIP"));
    			root.Add(new XElement("Email"));			
    			}
    		xdoc.Save(xstream);
    		}
    
    	public IObjectSet<BookCheckout> BookCheckouts
    		{
    		get 
    			{
    			return _bookCheckouts??(_bookCheckouts  = new TableObjectSet<BookCheckout>(client.BaseUri.ToString(), client.Credentials));		
    			}
    		}
    	private TableObjectSet<BookCheckout> _bookCheckouts;

    #endregion

    }
}
