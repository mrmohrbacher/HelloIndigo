<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
#>
<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#>

<#
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataTools ef = new MetadataTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this);

string inputFile = @"..\LibraryModel\LibraryModel.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = "LibraryModel";

//System.Diagnostics.Debugger.Launch();

EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
if (container == null)
{
    return "// No EntityContainer exists in the model, so no code was generated";
}
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Diagnostics;
using System.Data.Objects;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;

using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.StorageClient;

using Blackriverinc.Framework.DataStore;

using TableStorageSet;

<#
if (!String.IsNullOrEmpty(namespaceName))
{
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#
    PushIndent(CodeRegion.GetIndent(1));
}
#>
<#=Accessibility.ForType(container)#> partial class <#=code.Escape(container)#><TConfigProvider> 
	where TConfigProvider : DataStoreProvider, new()
	{
	CloudTableClient	client;

	public const string ContainerName = "<#=container.Name#>";
	
	string _connectionString = null;
	public string ConnectionString
		{
		get
			{
			if (_connectionString == null)
				{
				KeyedDataStore iconfig = new KeyedDataStore(new TConfigProvider());
				_connectionString = iconfig[string.Format("{0}.ConnectionString", ContainerName)];
				}
			Trace.WriteLine(string.Format("[{0}] Connection='{1}'", ContainerName, _connectionString));
			return _connectionString;
			}
		private set
			{
			_connectionString = value;
			}
		}

	#region Constructors
	private void createClient()
		{
		CloudStorageAccount account = CloudStorageAccount.Parse(ConnectionString);
		client = account.CreateCloudTableClient();
		}
		
	public <#=code.Escape(container)#>()
		{
		createClient();
		}
		
	public <#=code.Escape(container)#>(string connectionString)
		{
		ConnectionString = connectionString;
		createClient();
		}
		
    #endregion

	public bool DoesTableExist(string tableName)
		{
		return client.DoesTableExist(tableName);
		}

	public void SaveChanges()
		{
		_books.SaveChanges();
		}
		
<#
	region.Begin("Entities", 1);

	foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>())
		{
#>
	public bool <#=code.Escape(entitySet.ElementType)#>sTableExists
		{
			get
			{
			return client.DoesTableExist(<#=code.Escape(entitySet.ElementType)#>.TableName);
			}
		}

	public bool Create<#=code.Escape(entitySet.ElementType)#>s(bool testForExistence = false)
		{
		bool created = true;
		if (testForExistence)
			created = client.CreateTableIfNotExist(<#=code.Escape(entitySet.ElementType)#>.TableName);
		else
			client.CreateTable(<#=code.Escape(entitySet.ElementType)#>.TableName);
		return created;
		}
		
	public bool Drop<#=code.Escape(entitySet.ElementType)#>s(bool testForExistence = false)
		{
		bool existed = true;
		if (testForExistence)
			existed = client.DeleteTableIfExist(<#=code.Escape(entitySet.ElementType)#>.TableName);
		else
			client.DeleteTable(<#=code.Escape(entitySet.ElementType)#>.TableName);
		return existed;
		}
		
	public void Deserialize<#=code.Escape(entitySet.ElementType)#>s(Stream xstream)
		{
		XDocument xdoc = XDocument.Load(xstream);
		// Just write a custom deserializer for now...
		foreach (XElement xelem in xdoc.Descendants("<#=code.Escape(entitySet.ElementType)#>"))
			{
			<#=code.Escape(entitySet.ElementType)#> entity = new <#=code.Escape(entitySet.ElementType)#>()
				{
<#=deserializeProperties(entitySet.ElementType, "\t\t\t\t{0} = xelem.Element(\"{0}\").Value")#>
				};
			<#=code.Escape(entitySet)#>.AddObject(entity);
			}
		}
		
	public void Serialize<#=code.Escape(entitySet.ElementType)#>s(Stream xstream)
		{
		XDocument xdoc = new XDocument();
		XElement root = new XElement("<#=code.Escape(entitySet)#>");
		xdoc.Add(root);
			{
<#=serializeProperties(entitySet.ElementType, "\t\t\troot.Add(new XElement(\"{0}\"));")#>			
			}
		xdoc.Save(xstream);
		}

	<#=Accessibility.ForReadOnlyProperty(entitySet)#> IObjectSet<<#=code.Escape(entitySet.ElementType)#>> <#=code.Escape(entitySet)#>
		{
		get 
			{
			return <#=code.FieldName(entitySet) #>??(<#=code.FieldName(entitySet) #>  = new TableObjectSet<<#=code.Escape(entitySet.ElementType)#>>(client.BaseUri.ToString(), client.Credentials));		
			}
		}
	private TableObjectSet<<#=code.Escape(entitySet.ElementType)#>> <#=code.FieldName(entitySet)#>;
<#
	}

	region.End();

    region.Begin("Function Imports");

        foreach (EdmFunction edmFunction in container.FunctionImports)
        {
            var parameters = FunctionImportParameter.Create(edmFunction.Parameters, code, ef);
            string paramList = String.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray());
            if (edmFunction.ReturnParameter == null)
            {
                continue;
            }
            string returnTypeElement = code.Escape(ef.GetElementType(edmFunction.ReturnParameter.TypeUsage));

#>
    <#=Accessibility.ForMethod(edmFunction)#> ObjectResult<<#=returnTypeElement#>> <#=code.Escape(edmFunction)#>(<#=paramList#>)
    {
<#
            foreach (var parameter in parameters)
            {
                if (!parameter.NeedsLocalVariable)
                {
                    continue;
                }
#>

        ObjectParameter <#=parameter.LocalVariableName#>;

        if (<#=parameter.IsNullableOfT ? parameter.FunctionParameterName + ".HasValue" : parameter.FunctionParameterName + " != null"#>)
        {
            <#=parameter.LocalVariableName#> = new ObjectParameter("<#=parameter.EsqlParameterName#>", <#=parameter.FunctionParameterName#>);
        }
        else
        {
            <#=parameter.LocalVariableName#> = new ObjectParameter("<#=parameter.EsqlParameterName#>", typeof(<#=parameter.RawClrTypeName#>));
        }
<#
            }
#>
        return base.ExecuteFunction<<#=returnTypeElement#>>("<#=edmFunction.Name#>"<#=code.StringBefore(", ", String.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray()))#>);
    }
<#
        }

        region.End();

#>
}
<#
if (!String.IsNullOrEmpty(namespaceName))
{
    PopIndent();
#>
}
<#
}
#>
<#+

private void WriteLazyLoadingEnabled(EntityContainer container)
{
   string lazyLoadingAttributeValue = null;
   string lazyLoadingAttributeName = MetadataConstants.EDM_ANNOTATION_09_02 + ":LazyLoadingEnabled";
   if(MetadataTools.TryGetStringMetadataPropertySetting(container, lazyLoadingAttributeName, out lazyLoadingAttributeValue))
   {
       bool isLazyLoading = false;
       if(bool.TryParse(lazyLoadingAttributeValue, out isLazyLoading))
       {
#>
        this.ContextOptions.LazyLoadingEnabled = <#=isLazyLoading.ToString().ToLowerInvariant()#>;
<#+
       }
   }

}

string deserializeProperties(EntityType entity, string lineFormat)
{
	StringBuilder sb = new StringBuilder();
	int i = 0;
	foreach(var property in entity.Properties)
		{
		if (i > 0)
			sb.AppendLine(",");
		sb.AppendFormat(lineFormat, property); 
		i++;
		}
	return sb.ToString();
}

string serializeProperties(EntityType entity, string lineFormat)
{
	StringBuilder sb = new StringBuilder();
	int i = 0;
	foreach(var property in entity.Properties)
		{
		if (i > 0)
			sb.AppendLine();
		sb.AppendFormat(lineFormat, property); 
		i++;
		}
	return sb.ToString();
}

#>
